AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create an Amazon DocumentDB cluster and a Fargate task.

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "docdb-vpc"

  # Subnets
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
      Tags:
        - Key: Name
          Value: "docdb-subnet1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
      Tags:
        - Key: Name
          Value: "docdb-subnet2"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "docdb-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "docdb-route-table"

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for DocumentDB cluster"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0 # Replace with a more restrictive CIDR for production

  # Subnet Group for DocumentDB
  SubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for DocumentDB cluster"
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  ##PUESTO
  DocumentDBParameterGroup:
    Type: 'AWS::DocDB::DBClusterParameterGroup'
    Properties:
      Family: 'docdb4.0'
      Description: 'Custom parameter group for light disabling TLS'
      Parameters:
        tls: 'disabled'

  # DocumentDB Cluster
  DocDBCluster:
    Type: AWS::DocDB::DBCluster
    Properties:
      DBClusterIdentifier: "docdb-cluster"
      EngineVersion: "4.0.0"
      MasterUsername: "masteruser"
      MasterUserPassword: "masterpassword" # Update with a secure password
      DBSubnetGroupName: !Ref SubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
      DBClusterParameterGroupName: !Ref DocumentDBParameterGroup

  # DocumentDB Instance
  DocDBInstance:
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocDBCluster
      DBInstanceClass: db.r5.large
      AvailabilityZone: !Select
        - 0
        - !GetAZs

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "FargateCluster"

  ##PUESTO
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: 'btgin-light-repository'

  ##PUESTO
  ECSLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}-logs'
      RetentionInDays: 7

  # Fargate Task Definition
#  TaskDefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: "DocDBTask"
#      NetworkMode: awsvpc
#      RequiresCompatibilities:
#        - FARGATE
#      Cpu: "256"
#      Memory: "512"
#      ContainerDefinitions:
#        - Name: "docdb-client"
#          Image: "amazonlinux:2"
#          Essential: true
#          EntryPoint: ["/bin/bash", "-c"]
#          Command: ["yum install -y mongodb-org-shell && mongo --host $(DOCDB_CLUSTER_ENDPOINT) --username masteruser --password masterpassword --authenticationDatabase admin"]
#          Environment:
#            - Name: DOCDB_CLUSTER_ENDPOINT
#              Value: !GetAtt [DocDBCluster, Endpoint]
#      ExecutionRoleArn: !GetAtt [ECSTaskExecutionRole, Arn]
#      TaskRoleArn: !GetAtt [ECSTaskExecutionRole, Arn]
  ##PUESTO
  #Definicion de tarea para ejecutar el contenedor Docker
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'my-task-family'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: 'my-container'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          LogConfiguration: #nuevo para el tema de cloudwatch
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'   

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "ECSExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ##PUESTO
  #Balanceador de carga
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2        
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing

  ##PUESTO
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'

  ##PUESTO
  # Target Group para ECS
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /WeatherForecast
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ##PUESTO
  # Listener para ALB
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
            - !Ref LoadBalancerSecurityGroup
      LoadBalancers:
        - ContainerName: 'my-container'
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
    DependsOn:
      - Listener
      - DocDBInstance

  ##PUESTO
  # Bucket de S3 para el sitio web esttico
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'btgin-light-website-bucket'
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false      
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'

  ##PUESTO
  # Politica del bucket para permitir el acceso publico al contenido del sitio web
  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

Outputs:
  ClusterEndpoint:
    Description: "Cluster endpoint for connecting to the DocumentDB cluster"
    Value: !GetAtt [DocDBCluster, Endpoint]

  ClusterPort:
    Description: "Port for connecting to the DocumentDB cluster"
    Value: !GetAtt [DocDBCluster, Port]

  ##PUESTO
  ECRRepositoryUri:
    Description: 'ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'    