AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for an API backend using ECS Fargate and DocumentDB.

Resources:

  #Red virtual para alojar todos los recursos
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  #Subred publica
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet'
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-subnet-b'

  #Subred privada
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-subnet'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-route-table'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  #Base de datos DocumentDB
  DocumentDBSubnetGroup:
    Type: 'AWS::DocDB::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: !Sub '${AWS::StackName}-documentdb-subnet-group'
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref SubnetB
        - !Ref PrivateSubnet
      DBSubnetGroupDescription: 'DocumentDB subnet group'

  DocumentDBCluster:
    Type: 'AWS::DocDB::DBCluster'
    Properties:
      DBClusterIdentifier: !Sub '${AWS::StackName}-documentdb-cluster'
      MasterUsername: adminBTG
      MasterUserPassword: password123BTG-
      VpcSecurityGroupIds:
        - !GetAtt DocumentDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup
      EngineVersion: '4.0.0'
      StorageEncrypted: true

  DocumentDBInstance:
    Type: 'AWS::DocDB::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t3.medium

  DocumentDBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow access to DocumentDB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: '0.0.0.0/0'

  #Cluster de ECS con configuracion para Fargate
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ecs-cluster'

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ECSTaskExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetAuthorizationToken'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  #Repositorio para almacenar la imagen Docker
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: 'btgin-back-repository'

  # Grupo de registros para ECS
  ECSLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}-logs'
      RetentionInDays: 7

  #Definicion de tarea para ejecutar el contenedor Docker
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'my-task-family'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: 'my-container'
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}:latest'
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
          Environment:
            - Name: 'DB_ENDPOINT'
              Value: !GetAtt DocumentDBCluster.Endpoint
          LogConfiguration: #nuevo para el tema de cloudwatch
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'ecs'              

  #Balanceador de carga
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Subnets:
        - !Ref PublicSubnet
        - !Ref SubnetB
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP traffic to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'

  # Target Group para ECS
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /WeatherForecast
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Listener para ALB
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup


  #Servicio para gestionar la ejecucion de tareas en ECS
#  ECSService:
#    Type: 'AWS::ECS::Service'
#    Properties:
#      Cluster: !Ref ECSCluster
#      DesiredCount: 1
#      LaunchType: FARGATE
#      TaskDefinition: !Ref ECSTaskDefinition
#      NetworkConfiguration:
#        AwsvpcConfiguration:
#          AssignPublicIp: ENABLED
#          Subnets:
#            - !Ref PublicSubnet
#            - !Ref PrivateSubnet
#          SecurityGroups:
#            - !Ref ECSSecurityGroup
#      LoadBalancers:
#        - ContainerName: 'my-container'
#          ContainerPort: 8080
#          TargetGroupArn: !Ref TargetGroup
#    DependsOn:
#      - Listener
#      - DocumentDBInstance

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow traffic to ECS tasks'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: '0.0.0.0/0'

  # Bucket de S3 para el sitio web estatico
#  WebsiteBucket:
#    Type: 'AWS::S3::Bucket'
#    Properties:
#      BucketName: !Sub '${AWS::StackName}-website-bucket'
#      WebsiteConfiguration:
#        IndexDocument: 'index.html'
#        ErrorDocument: 'index.html'

  # Politica del bucket para permitir el acceso publico al contenido del sitio web
#  WebsiteBucketPolicy:
#    Type: 'AWS::S3::BucketPolicy'
#    Properties:
#      Bucket: !Ref WebsiteBucket
#      PolicyDocument:
#        Statement:
#          - Effect: Allow
#            Principal: '*'
#            Action: 's3:GetObject'
#            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

Outputs:
  VPCId:
    Description: 'VPC ID'
    Value: !Ref VPC

  PublicSubnetId:
    Description: 'Public Subnet ID'
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: 'Private Subnet ID'
    Value: !Ref PrivateSubnet

  DocumentDBClusterEndpoint:
    Description: 'DocumentDB Cluster Endpoint'
    Value: !GetAtt DocumentDBCluster.Endpoint

  ECRRepositoryUri:
    Description: 'ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'

  ECSClusterName:
    Description: 'ECS Cluster Name'
    Value: !Ref ECSCluster

#  ECSServiceName:
#    Description: 'ECS Service Name'
#    Value: !Ref ECSService

  LoadBalancerDNSName:
    Description: 'Load Balancer DNS Name'
    Value: !GetAtt LoadBalancer.DNSName

#  WebsiteURL:
#    Description: 'URL of the static website'
#    Value: !GetAtt WebsiteBucket.WebsiteURL    